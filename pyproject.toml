[tool.poetry]
name = "fastapi-backend"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.110.0"
uvicorn = "^0.27.1"
gunicorn = "^21.2.0"
sqlalchemy = "^2.0.27"
psycopg2-binary = "^2.9.7"
alembic = "^1.13.1"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
# Pin bcrypt until passlib supports the latest
bcrypt = "4.0.1"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.6"
pydantic = "2.6.2"
pydantic-settings = "2.2.1"
email-validator = "2.1.1"
emails = "^0.6"
jinja2 = "^3.1.3"

[tool.poetry.dev-dependencies]
pytest = "^8.0.2"
httpx = "^0.27.0"
ruff = "^0.3.7"

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
